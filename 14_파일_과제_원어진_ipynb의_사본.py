# -*- coding: utf-8 -*-
"""14_파일 과제-원어진.ipynb의 사본

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1y3_FaHdpvjaALngZ5g0-CTG3OMMU3Z8T

# (실습) 파일

**기본 설정**

파일 저장 경로와 파일 서버 주소를 지정에 필요한 기본 설정을 지정한다.
"""

from pathlib import Path
from urllib.request import urlretrieve

from google.colab import drive
drive.mount('/content/drive')

"""데이터가 저장된 텍스트 파일 서버 주소는 다음과 같다."""

base_url = "https://raw.githubusercontent.com/codingalzi/pybook/master/jupyter-book/data/"

"""현재 작업 디렉토리의 `data` 하위 디렉토리에 파일을 다운로드해서 저장할 준비를 한다."""

# 저장위치 지정과 생성
data_path = Path() / "data"
data_path.mkdir(parents=True, exist_ok=True)

"""`myWget()` 함수는 파일 서버에서 지정된 파일을 동일한 파일명으로 지정된 디렉토리에 저장한다."""

def myWget(filename):
    # 다운로드 대상 파일 경로
    file_url = base_url + filename

    # 저장 경로와 파일명
    target_path = data_path / filename

    return urlretrieve(file_url, target_path)

myWget('shopA.txt')

"""**쇼핑몰 파일 관련**

**문제 1**

`shopA.txt` 파일은 쇼핑몰A에서 판매하는 상품의 가격을 담고 있음을 확인해보자.
먼저 해당 파일을 다운로드 한다.
"""

myWget("shopA.txt")

target_path_shopA = data_path / "shopA.txt" #target_path_shopA는 
#data_path가 가리키는 경로.즉,"data"의 경로에 하위 디렉토리에 "shopA.txt." 파일을 추가함

print(data_path)          #data_path가 가리키는 경로
print(target_path_shopA)  #target_path_shopA가 가리키는 경로

"""이제 파일 전체 내용을 출력하는 코드를 작성하라.

힌트: `with-as` 명령문, `open()` 함수, `readlines()` 또는 `read()` 파일 메서드.
"""

# 코드를 작성하세요.
with target_path_shopA.open(mode = 'r' , encoding = 'utf-8') as f: 
  # target_path_shopA가 가리키는 파일을 오픈하고, 할 일을 다하면 자동 닫기 처리.
  for line in f:
    print(line.strip()) #line 대신 line.strip()을 쓰면 공백없이 깔끔하게 출력 가능

"""**문제 2**

`shopA.txt` 파일의 내용을 확인하면, 오타가 있다. 
'오레ㄴ지' 를 '오렌지'로 변경한 후에
`shopA.txt` 파일을 열어 오타가 수정되었는지를 확인하여라.  

힌트: 파일의 `read()` 메서드, 문자열의 `replace()` 메서드

* 파일 읽기: `read()` 메서드 활용
"""

# 파일내용을 하나의 문자열로 생성하는 코드를 작성하라.
with target_path_shopA.open(mode = 'r' , encoding = 'utf-8') as f:
  lines = f.read()    #파일 f의 내용 전체를 하나의 문자열로 불러옴
print(lines)

"""* 오타 수정: `replace()` 문자열 메서드 활용"""

# 오타를 수정하는 코드를 작성하라.

with target_path_shopA.open(mode = 'r' , encoding = 'utf-8') as f:
  lines = f.read().replace('오레ㄴ지' , '오렌지') 
  #앞으로 lines는 target_path_shopA파일의 오타를 수정한 문자열을 가리킴
lines

"""* 파일 저장"""

# 오타가 수정된 문자열을 파일로 저장하는 코드를 작성하라.
with target_path_shopA.open(mode = 'w' , encoding = 'utf-8') as f:
  f.write(lines)

"""* 파일 내용 확인"""

# 오타가 수정되었음을 확인하는 코드를 작성하라.
with target_path_shopA.open(mode = 'r' , encoding = 'utf-8') as f:
  for i in f:
    print(i.strip())

"""**문제 3**

상품명과 가격을 키-값의 쌍으로 갖는 아래 모양의 딕셔너리를 만들어라.
단, 오타가 수정된 파일을 이용해야 한다.

```python
{'우유': 2540,
 '계란': 7480,
 '생수': 980,
 '짜장라면': 3220,
 '두부': 1450,
 '콩나물': 1680,
 '김': 5480,
 '닭고기': 5980,
 '식빵': 2480,
 '바나나': 4980,
 '오렌지': 990,
 '카레': 2480,
 '만두': 6980,
 '어묵': 7980,
 '참치': 11880,
 '김치': 7980,
 '간장': 10800}
```
"""

with target_path_shopA.open() as f:
    results_shopA_dict = {}
    for line in f:
      if line.strip():
        name, price = line.strip().split()
        if price != '가격':
            results_shopA_dict[name] = price

for key in results_shopA_dict:  
    if key != '#쇼핑몰':        #키값이 "쇼핑몰"이 아닐경우
        results_shopA_dict[key] = int(results_shopA_dict[key].replace('원', ''))
   #사전_shopA의 키가 가리키는 값은 , 앞으로 '원'을 빼고 정수형태로 바뀐 값을 가리킴
del results_shopA_dict['#쇼핑몰']

results_shopA_dict

"""**문제 4**

`shopA.txt` 와 같이 상품명과 가격으로 이루어진 쇼핑 리스트가 포함된 파일의 이름을 입력받으면
상품명과 가격을 각각 키와 값으로 갖는 사전 객체를 반환하는 함수 `shopping()` 을 구현하라.

힌트: 문제 3을 해결하기 위해 작성한 코드를 이용한다.
"""

def myWget(filename):
    # 다운로드 대상 파일 경로
    file_url = base_url + filename

    # 저장 경로와 파일명
    target_path = data_path / filename

    return urlretrieve(file_url, target_path)


#기존 myWget함수다

with target_path_shopA.open(mode = 'r' , encoding = 'utf-8') as f:
  lines = f.read().replace('오레ㄴ지' , '오렌지') 
  #앞으로 lines는 target_path_shopA파일의 오타를 수정한 문자열을 가리킴
lines

# 오타가 수정된 문자열을 파일로 저장하는 코드를 작성하라.
with target_path_shopA.open(mode = 'w' , encoding = 'utf-8') as f:
  f.write(lines)

def myWget(url):
    filename = url.split("/")[-1]  # 파일 이름 추출
    data_path = Path.cwd() / "data"
    target_path = data_path / filename
    if not target_path.exists():  # 파일이 존재하지 않으면 다운로드
        urlretrieve(url, target_path)
    return target_path, filename


# 새로운 함수 myWget

import os
os.getcwd() 현재경로

# 아래 코드를 완성하라. 

def shopping(shop_file):
  
    shop_dict = {} # 생성할 사전 객체
    target_path_shopping = myWget(shop_file)[0]
# target_path_shopping은 앞으로 다운로드 대상의 파일 경로를 가리킴.

# 그런데, 기존 myWget함수를 사용하면 이미 다운로드된 파일도 URL에서 다시 새로 다운하여
# 오타가 수정되지 않은 기존의 'shopA'를 가리키게 됨

# 따라서 이미 다운로드된 파일이 있는 경우에는 다운로드를 생략하고 파일의 경로를 가리키는
# 새로운 함수를 myWget로 다시 정의함


    with target_path_shopping.open( mode = 'r', encoding = 'utf-8') as f: 
      for i in f:
        if i.strip():
          name, price = i.strip().split()
          if price != '가격':
            shop_dict[name] = price
    
    for key in shop_dict:  
        if key != '#쇼핑몰':        #키값이 "쇼핑몰"이 아닐경우
            shop_dict[key] = int(shop_dict[key].replace('원', ''))
# 사전shop_dict의 키가 가리키는 값은 , 앞으로 '원'을 빼고 정수형태로 바뀐 값을 가리킴
    del shop_dict['#쇼핑몰']


    return shop_dict

print(shopping("shopA.txt")) #프린트 실행시 한줄로 출력됨

shopping("shopA.txt")# shopping함수 실행시 여러줄로 출력됨

"""**문제 5**

쇼핑 리스트와 상품을 인자로 지정하면 상품의 가격을 반환하는 함수 `item_price()` 를 구현하라.

힌트: `shopping()` 함수를 이용한다.
"""

type(shopping("shopA.txt")) #함수 shopping의 반환값은 dict(사전)임
shopping("shopA.txt")['우유'] #키가 가리키는 값

'''
원하는 것은 쇼핑 리스트(사전. 즉, shopping의 반환값)에서
상품(쇼핑함수 반환값의 키)를 입력하면
가격(키가 가리키는 값)을 반환하는 것임
'''

# 함수를 완성하라.

def item_price(shop_file, item):
    return shopping(shop_file)[item] 
    # 쇼핑함수의 반환값인 사전 중에서, item이라는 키가 가리키는 값 


print(item_price("shopA.txt", '김치'))

type(item_price("shopA.txt", '김치'))#반환값은 정수임

"""**문제 6**

`shopB.txt` 파일은 쇼핑몰B에서 판매하는 상품의 가격을 담고 있으며,
`shopA.txt` 파일과 동일한 방식으로 다운로드할 수 있다.
"""

def myWget(filename):
    # 다운로드 대상 파일 경로
    file_url = base_url + filename

    # 저장 경로와 파일명
    target_path = data_path / filename

    return urlretrieve(file_url, target_path)
#원래 myWget

myWget("shopB.txt")

target_path_shopB = data_path / "shopB.txt"

# 쇼핑몰B내용 확인용
with target_path_shopB.open(mode = 'r' , encoding = 'utf-8') as f:
  for i in f:
    print(i.strip())
with target_path_shopA.open(mode = 'r' , encoding = 'utf-8') as f:
  for i in f:
    print(i.strip())

"""사용자가 상품을 입력하면, 쇼핑몰A와 쇼핑몰B 중 어느 쇼핑몰에서 구입하는 것이 얼마나 저렴한지를 보여주는
함수 `price_comparison()`를 작성하라.

아이디어는 두 사전(쇼핑몰 A와 B)의 반환값을 비교하는 것임
즉 item_price함수를 두 쇼핑몰에 적용하고 그 반환값을 비교
"""

print(item_price("shopA.txt", '김치')) #쇼핑몰 A의 김치가격
item_price("shopB.txt", '김치')        #B의 김치가격

# 코드를 완성하라.

def price_comparison(item):
    pirce_shopA = item_price("shopA.txt", item)
    pirce_shopB = item_price("shopB.txt", item)
    
    if pirce_shopA > pirce_shopB :
      return f"쇼핑몰B가 쇼핑몰A보다 {pirce_shopA - pirce_shopB}원 저렴합니다."
    elif pirce_shopA < pirce_shopB :
      return f"쇼핑몰A가 쇼핑몰B보다 {pirce_shopB - pirce_shopA}원 저렴합니다."
    else:
      return f"쇼핑몰 A와 B는 이 상품에 대해 가격차이가 없습니다."

print(price_comparison('김치')) #쇼핑몰A의 김치가격은 7980 B는 8480. 즉, A가 B보다 500원 저렴

"""**다이빙 기록 관련**

**문제 7**

[5미터 다이빙 기록 에서 등수를 확인하는 작업](https://codingalzi.github.io/pybook/files.html#sec-exp-diving-5m)과 
동일한 작업을 10미터 다이빙 기록에 대해 진행하라.
"""

#준비코드
myWget("results10m.txt") #10m 다이빙 기록 파일
target_path_10m = data_path / "results10m.txt"

# 코드를 작성하라.
f = open(target_path_10m, encoding = "utf-8")
scores_10m = {}

with target_path_10m.open(mode = 'r', encoding = 'utf-8') as f:
  for i in f:
    name,s_10m = i.split()
    try:
      scores_10m[name] = float(s_10m)
    except:
      continue



sorted_scores_10m = sorted(scores_10m.items(), key= lambda item: item[1], reverse=True)
sorted_scores_10m

print('10미터 다이빙 결과')

count = 1
for item in sorted_scores_10m:
  print(f'{count}등: {item[0]} {item[1]}')
  count = count+1

"""**문제 8**

5미터 다이빙 기록과 10미터 다이빙 기록의 합에 대해 등수를 확인하는 코드를 작성하라.
"""

#준비코드
myWget("results5m.txt") #5m 다이빙 기록 파일
target_path_5m = data_path / "results5m.txt"

# 5미터 다이빙 기록이 들어있는 사전 만들기

with target_path_5m.open(mode = "r", encoding='utf-8') as f:
  results_5m_dict = {}
  for i in f:
    name, score = i.strip().split()
    if score != "점수":  
      results_5m_dict[name] = score

results_5m_dict

# 10미터 다이빙 기록이 들어있는 사전 만들기

with target_path_10m.open(mode = "r", encoding='utf-8') as f:
  results_10m_dict = {}
  for i in f:
    name, score = i.strip().split()
    if score != "점수":
      results_10m_dict[name] = score

results_10m_dict

# 5미터와 10미터 다이빙 기록이 합쳐진 사전 만들기

diving_results_dict = {}

for name in results_5m_dict:
  score_5m = results_5m_dict[name]
  score_10m = results_10m_dict[name]
  diving_results_dict[name] = float(score_5m) + float(score_10m)


sorted_diving_results_dict = sorted(diving_results_dict.items(), key= lambda item: item[1], reverse=True)
sorted_diving_results_dict

# 코드를 작성하라.

print("5미터,10미터 다이빙 종합결과")

ranking = 1
for i in sorted_diving_results_dict:
    print(f"{ranking}등: {i[0]} {i[1]}")
    ranking = ranking + 1

